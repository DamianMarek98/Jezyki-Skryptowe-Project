import math
import time

test_file = "C://Users//zmddd//Desktop/Studia//Mgr Sem I//Jezyki-Skryptowe-Project//Project_1//test.txt"
result_file_impl = "C://Users//zmddd//Desktop/Studia//Mgr Sem I//Jezyki-Skryptowe-Project//Project_1//results_py_impl_comb.txt"
result_file_lib = "C://Users//zmddd//Desktop/Studia//Mgr Sem I//Jezyki-Skryptowe-Project//Project_1//results_py_lib_comb.txt"

class comb_data:
    def __init__(self, n, k):
        self.n = n
        self.k = k

def math_comb(n, k):
    if (k > n):
        return 0
    else:
        return factorial(n) / (factorial(k) * factorial(n - k))


def factorial(n):
    result = 1
    for i in range(1, n + 1):
        result = result * i

    return result

def test_time_impl():
    file = open(test_file, 'r')
    lines = file.readlines()
    data = []
    for line in lines:
        values = line.split(", ")
        data.append(comb_data(int(values[0]), int(values[1])))

    n = 1000000
    start_time = time.time()
    for i in range(0, n):
        for elem in data:
            math_comb(elem.n, elem.k)

    elapsed_time = time.time() - start_time

    print("Implementation test n = " + str(n) + "; time = " + str(elapsed_time) + "s")


def test_time_lib():
    file = open(test_file, 'r')
    lines = file.readlines()
    data = []
    for line in lines:
        values = line.split(", ")
        data.append(comb_data(int(values[0]), int(values[1])))

    n = 8000000
    start_time = time.time()
    for i in range(0, n):
        pass
        for elem in data:
            math.comb(elem.n, elem.k)

    elapsed_time = time.time() - start_time

    print("Lib test n = " + str(n) + "; time = " + str(elapsed_time) + "s")


def test_function(impl=False):
    with open(result_file_impl if impl else result_file_lib, 'w') as out_file:
        file = open(test_file, 'r')
        lines = file.readlines()
        for line in lines:
            values = line.split(", ")
            n = int(values[0])
            k = int(values[1])
            expected_res = int(values[2])
            time1 = time.perf_counter()
            res = 0
            if (impl) :
                for i in range(0, 10000):
                    res = int(math_comb(n, k))
            else:
                for i in range(0, 100000):
                    res = math.comb(n, k)
            time2 = time.perf_counter()
            if (res != expected_res):
                print("Result not the same as expected! case n = " + str(n) + " k= " + str(k) + " impl = " + str(impl))
            out_file.write('n = ' + str(n) + ', k = ' + str(k) + ', res = ' + str(res) + " time: " + str((time2 - time1)) + 's\n')


def generate_all_possible_cases():
    with open(test_file, 'w') as file:
        for n in range(0, 21):  # 20! max Integer value
            for k in range(0, n + 2):
                file.write(str(n) + ', ' + str(k) + ', ' + str(math.comb(n, k)) + '\n')


generate_all_possible_cases()
test_time_impl()
test_time_lib()